//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MEDIA.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(OrderInfo))]
    [KnownType(typeof(Product))]
    public partial class OrderDetail: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int BuyId
        {
            get { return _buyId; }
            set
            {
                if (_buyId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'BuyId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _buyId = value;
                    OnPropertyChanged("BuyId");
                }
            }
        }
        private int _buyId;
    
        [DataMember]
        public Nullable<int> ProductId
        {
            get { return _productId; }
            set
            {
                if (_productId != value)
                {
                    ChangeTracker.RecordOriginalValue("ProductId", _productId);
                    if (!IsDeserializing)
                    {
                        if (Product != null && Product.ProductId != value)
                        {
                            Product = null;
                        }
                    }
                    _productId = value;
                    OnPropertyChanged("ProductId");
                }
            }
        }
        private Nullable<int> _productId;
    
        [DataMember]
        public Nullable<int> OrderId
        {
            get { return _orderId; }
            set
            {
                if (_orderId != value)
                {
                    ChangeTracker.RecordOriginalValue("OrderId", _orderId);
                    if (!IsDeserializing)
                    {
                        if (OrderInfo != null && OrderInfo.OrderId != value)
                        {
                            OrderInfo = null;
                        }
                    }
                    _orderId = value;
                    OnPropertyChanged("OrderId");
                }
            }
        }
        private Nullable<int> _orderId;
    
        [DataMember]
        public Nullable<short> Num
        {
            get { return _num; }
            set
            {
                if (_num != value)
                {
                    _num = value;
                    OnPropertyChanged("Num");
                }
            }
        }
        private Nullable<short> _num;
    
        [DataMember]
        public string Size
        {
            get { return _size; }
            set
            {
                if (_size != value)
                {
                    _size = value;
                    OnPropertyChanged("Size");
                }
            }
        }
        private string _size;
    
        [DataMember]
        public string JsonMark
        {
            get { return _jsonMark; }
            set
            {
                if (_jsonMark != value)
                {
                    _jsonMark = value;
                    OnPropertyChanged("JsonMark");
                }
            }
        }
        private string _jsonMark;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public OrderInfo OrderInfo
        {
            get { return _orderInfo; }
            set
            {
                if (!ReferenceEquals(_orderInfo, value))
                {
                    var previousValue = _orderInfo;
                    _orderInfo = value;
                    FixupOrderInfo(previousValue);
                    OnNavigationPropertyChanged("OrderInfo");
                }
            }
        }
        private OrderInfo _orderInfo;
    
        [DataMember]
        public Product Product
        {
            get { return _product; }
            set
            {
                if (!ReferenceEquals(_product, value))
                {
                    var previousValue = _product;
                    _product = value;
                    FixupProduct(previousValue);
                    OnNavigationPropertyChanged("Product");
                }
            }
        }
        private Product _product;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            OrderInfo = null;
            Product = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupOrderInfo(OrderInfo previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.OrderDetails.Contains(this))
            {
                previousValue.OrderDetails.Remove(this);
            }
    
            if (OrderInfo != null)
            {
                if (!OrderInfo.OrderDetails.Contains(this))
                {
                    OrderInfo.OrderDetails.Add(this);
                }
    
                OrderId = OrderInfo.OrderId;
            }
            else if (!skipKeys)
            {
                OrderId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("OrderInfo")
                    && (ChangeTracker.OriginalValues["OrderInfo"] == OrderInfo))
                {
                    ChangeTracker.OriginalValues.Remove("OrderInfo");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("OrderInfo", previousValue);
                }
                if (OrderInfo != null && !OrderInfo.ChangeTracker.ChangeTrackingEnabled)
                {
                    OrderInfo.StartTracking();
                }
            }
        }
    
        private void FixupProduct(Product previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.OrderDetails.Contains(this))
            {
                previousValue.OrderDetails.Remove(this);
            }
    
            if (Product != null)
            {
                if (!Product.OrderDetails.Contains(this))
                {
                    Product.OrderDetails.Add(this);
                }
    
                ProductId = Product.ProductId;
            }
            else if (!skipKeys)
            {
                ProductId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Product")
                    && (ChangeTracker.OriginalValues["Product"] == Product))
                {
                    ChangeTracker.OriginalValues.Remove("Product");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Product", previousValue);
                }
                if (Product != null && !Product.ChangeTracker.ChangeTrackingEnabled)
                {
                    Product.StartTracking();
                }
            }
        }

        #endregion
    }
}
