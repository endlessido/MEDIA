//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MEDIA.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(DonationProject))]
    [KnownType(typeof(User))]
    public partial class DonateRecord: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int RecordId
        {
            get { return _recordId; }
            set
            {
                if (_recordId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'RecordId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _recordId = value;
                    OnPropertyChanged("RecordId");
                }
            }
        }
        private int _recordId;
    
        [DataMember]
        public Nullable<int> UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    ChangeTracker.RecordOriginalValue("UserId", _userId);
                    if (!IsDeserializing)
                    {
                        if (User != null && User.UserId != value)
                        {
                            User = null;
                        }
                    }
                    _userId = value;
                    OnPropertyChanged("UserId");
                }
            }
        }
        private Nullable<int> _userId;
    
        [DataMember]
        public Nullable<int> ProjectId
        {
            get { return _projectId; }
            set
            {
                if (_projectId != value)
                {
                    ChangeTracker.RecordOriginalValue("ProjectId", _projectId);
                    if (!IsDeserializing)
                    {
                        if (DonationProject != null && DonationProject.ProjectId != value)
                        {
                            DonationProject = null;
                        }
                    }
                    _projectId = value;
                    OnPropertyChanged("ProjectId");
                }
            }
        }
        private Nullable<int> _projectId;
    
        [DataMember]
        public Nullable<decimal> DonateFunding
        {
            get { return _donateFunding; }
            set
            {
                if (_donateFunding != value)
                {
                    _donateFunding = value;
                    OnPropertyChanged("DonateFunding");
                }
            }
        }
        private Nullable<decimal> _donateFunding;
    
        [DataMember]
        public Nullable<System.DateTime> DonateDate
        {
            get { return _donateDate; }
            set
            {
                if (_donateDate != value)
                {
                    _donateDate = value;
                    OnPropertyChanged("DonateDate");
                }
            }
        }
        private Nullable<System.DateTime> _donateDate;
    
        [DataMember]
        public Nullable<bool> IsPayment
        {
            get { return _isPayment; }
            set
            {
                if (_isPayment != value)
                {
                    _isPayment = value;
                    OnPropertyChanged("IsPayment");
                }
            }
        }
        private Nullable<bool> _isPayment;
    
        [DataMember]
        public string CurrencyStr
        {
            get { return _currencyStr; }
            set
            {
                if (_currencyStr != value)
                {
                    _currencyStr = value;
                    OnPropertyChanged("CurrencyStr");
                }
            }
        }
        private string _currencyStr;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public DonationProject DonationProject
        {
            get { return _donationProject; }
            set
            {
                if (!ReferenceEquals(_donationProject, value))
                {
                    var previousValue = _donationProject;
                    _donationProject = value;
                    FixupDonationProject(previousValue);
                    OnNavigationPropertyChanged("DonationProject");
                }
            }
        }
        private DonationProject _donationProject;
    
        [DataMember]
        public User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                    OnNavigationPropertyChanged("User");
                }
            }
        }
        private User _user;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            DonationProject = null;
            User = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupDonationProject(DonationProject previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.DonateRecords.Contains(this))
            {
                previousValue.DonateRecords.Remove(this);
            }
    
            if (DonationProject != null)
            {
                if (!DonationProject.DonateRecords.Contains(this))
                {
                    DonationProject.DonateRecords.Add(this);
                }
    
                ProjectId = DonationProject.ProjectId;
            }
            else if (!skipKeys)
            {
                ProjectId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DonationProject")
                    && (ChangeTracker.OriginalValues["DonationProject"] == DonationProject))
                {
                    ChangeTracker.OriginalValues.Remove("DonationProject");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DonationProject", previousValue);
                }
                if (DonationProject != null && !DonationProject.ChangeTracker.ChangeTrackingEnabled)
                {
                    DonationProject.StartTracking();
                }
            }
        }
    
        private void FixupUser(User previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.DonateRecords.Contains(this))
            {
                previousValue.DonateRecords.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.DonateRecords.Contains(this))
                {
                    User.DonateRecords.Add(this);
                }
    
                UserId = User.UserId;
            }
            else if (!skipKeys)
            {
                UserId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("User")
                    && (ChangeTracker.OriginalValues["User"] == User))
                {
                    ChangeTracker.OriginalValues.Remove("User");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("User", previousValue);
                }
                if (User != null && !User.ChangeTracker.ChangeTrackingEnabled)
                {
                    User.StartTracking();
                }
            }
        }

        #endregion
    }
}
