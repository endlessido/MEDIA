//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MEDIA.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(OrderDetail))]
    [KnownType(typeof(User))]
    public partial class OrderInfo: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int OrderId
        {
            get { return _orderId; }
            set
            {
                if (_orderId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'OrderId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _orderId = value;
                    OnPropertyChanged("OrderId");
                }
            }
        }
        private int _orderId;
    
        [DataMember]
        public Nullable<int> UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    ChangeTracker.RecordOriginalValue("UserId", _userId);
                    if (!IsDeserializing)
                    {
                        if (User != null && User.UserId != value)
                        {
                            User = null;
                        }
                    }
                    _userId = value;
                    OnPropertyChanged("UserId");
                }
            }
        }
        private Nullable<int> _userId;
    
        [DataMember]
        public Nullable<System.DateTime> OrderDate
        {
            get { return _orderDate; }
            set
            {
                if (_orderDate != value)
                {
                    _orderDate = value;
                    OnPropertyChanged("OrderDate");
                }
            }
        }
        private Nullable<System.DateTime> _orderDate;
    
        [DataMember]
        public Nullable<decimal> TotalPrice
        {
            get { return _totalPrice; }
            set
            {
                if (_totalPrice != value)
                {
                    _totalPrice = value;
                    OnPropertyChanged("TotalPrice");
                }
            }
        }
        private Nullable<decimal> _totalPrice;
    
        [DataMember]
        public Nullable<decimal> ShipFee
        {
            get { return _shipFee; }
            set
            {
                if (_shipFee != value)
                {
                    _shipFee = value;
                    OnPropertyChanged("ShipFee");
                }
            }
        }
        private Nullable<decimal> _shipFee;
    
        [DataMember]
        public string ShipType
        {
            get { return _shipType; }
            set
            {
                if (_shipType != value)
                {
                    _shipType = value;
                    OnPropertyChanged("ShipType");
                }
            }
        }
        private string _shipType;
    
        [DataMember]
        public string PayType
        {
            get { return _payType; }
            set
            {
                if (_payType != value)
                {
                    _payType = value;
                    OnPropertyChanged("PayType");
                }
            }
        }
        private string _payType;
    
        [DataMember]
        public Nullable<bool> IsPayment
        {
            get { return _isPayment; }
            set
            {
                if (_isPayment != value)
                {
                    _isPayment = value;
                    OnPropertyChanged("IsPayment");
                }
            }
        }
        private Nullable<bool> _isPayment;
    
        [DataMember]
        public string ReceiverName
        {
            get { return _receiverName; }
            set
            {
                if (_receiverName != value)
                {
                    _receiverName = value;
                    OnPropertyChanged("ReceiverName");
                }
            }
        }
        private string _receiverName;
    
        [DataMember]
        public string ReceiverPhone
        {
            get { return _receiverPhone; }
            set
            {
                if (_receiverPhone != value)
                {
                    _receiverPhone = value;
                    OnPropertyChanged("ReceiverPhone");
                }
            }
        }
        private string _receiverPhone;
    
        [DataMember]
        public string PostCode
        {
            get { return _postCode; }
            set
            {
                if (_postCode != value)
                {
                    _postCode = value;
                    OnPropertyChanged("PostCode");
                }
            }
        }
        private string _postCode;
    
        [DataMember]
        public string ReceiverAddress
        {
            get { return _receiverAddress; }
            set
            {
                if (_receiverAddress != value)
                {
                    _receiverAddress = value;
                    OnPropertyChanged("ReceiverAddress");
                }
            }
        }
        private string _receiverAddress;
    
        [DataMember]
        public string CurrencyStr
        {
            get { return _currencyStr; }
            set
            {
                if (_currencyStr != value)
                {
                    _currencyStr = value;
                    OnPropertyChanged("CurrencyStr");
                }
            }
        }
        private string _currencyStr;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<OrderDetail> OrderDetails
        {
            get
            {
                if (_orderDetails == null)
                {
                    _orderDetails = new TrackableCollection<OrderDetail>();
                    _orderDetails.CollectionChanged += FixupOrderDetails;
                }
                return _orderDetails;
            }
            set
            {
                if (!ReferenceEquals(_orderDetails, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_orderDetails != null)
                    {
                        _orderDetails.CollectionChanged -= FixupOrderDetails;
                    }
                    _orderDetails = value;
                    if (_orderDetails != null)
                    {
                        _orderDetails.CollectionChanged += FixupOrderDetails;
                    }
                    OnNavigationPropertyChanged("OrderDetails");
                }
            }
        }
        private TrackableCollection<OrderDetail> _orderDetails;
    
        [DataMember]
        public User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                    OnNavigationPropertyChanged("User");
                }
            }
        }
        private User _user;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            OrderDetails.Clear();
            User = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupUser(User previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.OrderInfoes.Contains(this))
            {
                previousValue.OrderInfoes.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.OrderInfoes.Contains(this))
                {
                    User.OrderInfoes.Add(this);
                }
    
                UserId = User.UserId;
            }
            else if (!skipKeys)
            {
                UserId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("User")
                    && (ChangeTracker.OriginalValues["User"] == User))
                {
                    ChangeTracker.OriginalValues.Remove("User");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("User", previousValue);
                }
                if (User != null && !User.ChangeTracker.ChangeTrackingEnabled)
                {
                    User.StartTracking();
                }
            }
        }
    
        private void FixupOrderDetails(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (OrderDetail item in e.NewItems)
                {
                    item.OrderInfo = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("OrderDetails", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (OrderDetail item in e.OldItems)
                {
                    if (ReferenceEquals(item.OrderInfo, this))
                    {
                        item.OrderInfo = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("OrderDetails", item);
                    }
                }
            }
        }

        #endregion
    }
}
