//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MEDIA.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Administrator))]
    [KnownType(typeof(DonateRecord))]
    [KnownType(typeof(User))]
    [KnownType(typeof(Goody))]
    public partial class DonationProject: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ProjectId
        {
            get { return _projectId; }
            set
            {
                if (_projectId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProjectId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _projectId = value;
                    OnPropertyChanged("ProjectId");
                }
            }
        }
        private int _projectId;
    
        [DataMember]
        public Nullable<short> AdminId
        {
            get { return _adminId; }
            set
            {
                if (_adminId != value)
                {
                    ChangeTracker.RecordOriginalValue("AdminId", _adminId);
                    if (!IsDeserializing)
                    {
                        if (Administrator != null && Administrator.AdminId != value)
                        {
                            Administrator = null;
                        }
                    }
                    _adminId = value;
                    OnPropertyChanged("AdminId");
                }
            }
        }
        private Nullable<short> _adminId;
    
        [DataMember]
        public Nullable<int> UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    ChangeTracker.RecordOriginalValue("UserId", _userId);
                    if (!IsDeserializing)
                    {
                        if (User != null && User.UserId != value)
                        {
                            User = null;
                        }
                    }
                    _userId = value;
                    OnPropertyChanged("UserId");
                }
            }
        }
        private Nullable<int> _userId;
    
        [DataMember]
        public string ProjectName
        {
            get { return _projectName; }
            set
            {
                if (_projectName != value)
                {
                    _projectName = value;
                    OnPropertyChanged("ProjectName");
                }
            }
        }
        private string _projectName;
    
        [DataMember]
        public string YoutubeUrl
        {
            get { return _youtubeUrl; }
            set
            {
                if (_youtubeUrl != value)
                {
                    _youtubeUrl = value;
                    OnPropertyChanged("YoutubeUrl");
                }
            }
        }
        private string _youtubeUrl;
    
        [DataMember]
        public string KeyWords
        {
            get { return _keyWords; }
            set
            {
                if (_keyWords != value)
                {
                    _keyWords = value;
                    OnPropertyChanged("KeyWords");
                }
            }
        }
        private string _keyWords;
    
        [DataMember]
        public string ProjectSummary
        {
            get { return _projectSummary; }
            set
            {
                if (_projectSummary != value)
                {
                    _projectSummary = value;
                    OnPropertyChanged("ProjectSummary");
                }
            }
        }
        private string _projectSummary;
    
        [DataMember]
        public string Need
        {
            get { return _need; }
            set
            {
                if (_need != value)
                {
                    _need = value;
                    OnPropertyChanged("Need");
                }
            }
        }
        private string _need;
    
        [DataMember]
        public string NeedReason
        {
            get { return _needReason; }
            set
            {
                if (_needReason != value)
                {
                    _needReason = value;
                    OnPropertyChanged("NeedReason");
                }
            }
        }
        private string _needReason;
    
        [DataMember]
        public string Country
        {
            get { return _country; }
            set
            {
                if (_country != value)
                {
                    _country = value;
                    OnPropertyChanged("Country");
                }
            }
        }
        private string _country;
    
        [DataMember]
        public string Area
        {
            get { return _area; }
            set
            {
                if (_area != value)
                {
                    _area = value;
                    OnPropertyChanged("Area");
                }
            }
        }
        private string _area;
    
        [DataMember]
        public string CategoryName
        {
            get { return _categoryName; }
            set
            {
                if (_categoryName != value)
                {
                    _categoryName = value;
                    OnPropertyChanged("CategoryName");
                }
            }
        }
        private string _categoryName;
    
        [DataMember]
        public string SelfIntroduce
        {
            get { return _selfIntroduce; }
            set
            {
                if (_selfIntroduce != value)
                {
                    _selfIntroduce = value;
                    OnPropertyChanged("SelfIntroduce");
                }
            }
        }
        private string _selfIntroduce;
    
        [DataMember]
        public string YourVision
        {
            get { return _yourVision; }
            set
            {
                if (_yourVision != value)
                {
                    _yourVision = value;
                    OnPropertyChanged("YourVision");
                }
            }
        }
        private string _yourVision;
    
        [DataMember]
        public string Homepage
        {
            get { return _homepage; }
            set
            {
                if (_homepage != value)
                {
                    _homepage = value;
                    OnPropertyChanged("Homepage");
                }
            }
        }
        private string _homepage;
    
        [DataMember]
        public string Feedbookpage
        {
            get { return _feedbookpage; }
            set
            {
                if (_feedbookpage != value)
                {
                    _feedbookpage = value;
                    OnPropertyChanged("Feedbookpage");
                }
            }
        }
        private string _feedbookpage;
    
        [DataMember]
        public Nullable<decimal> TotalFunding
        {
            get { return _totalFunding; }
            set
            {
                if (_totalFunding != value)
                {
                    _totalFunding = value;
                    OnPropertyChanged("TotalFunding");
                }
            }
        }
        private Nullable<decimal> _totalFunding;
    
        [DataMember]
        public Nullable<decimal> ReceivedFunding
        {
            get { return _receivedFunding; }
            set
            {
                if (_receivedFunding != value)
                {
                    _receivedFunding = value;
                    OnPropertyChanged("ReceivedFunding");
                }
            }
        }
        private Nullable<decimal> _receivedFunding;
    
        [DataMember]
        public Nullable<bool> IsSendNews
        {
            get { return _isSendNews; }
            set
            {
                if (_isSendNews != value)
                {
                    _isSendNews = value;
                    OnPropertyChanged("IsSendNews");
                }
            }
        }
        private Nullable<bool> _isSendNews;
    
        [DataMember]
        public string CurrencyStr
        {
            get { return _currencyStr; }
            set
            {
                if (_currencyStr != value)
                {
                    _currencyStr = value;
                    OnPropertyChanged("CurrencyStr");
                }
            }
        }
        private string _currencyStr;
    
        [DataMember]
        public Nullable<System.DateTime> CreateDate
        {
            get { return _createDate; }
            set
            {
                if (_createDate != value)
                {
                    _createDate = value;
                    OnPropertyChanged("CreateDate");
                }
            }
        }
        private Nullable<System.DateTime> _createDate;
    
        [DataMember]
        public Nullable<System.DateTime> EndDate
        {
            get { return _endDate; }
            set
            {
                if (_endDate != value)
                {
                    _endDate = value;
                    OnPropertyChanged("EndDate");
                }
            }
        }
        private Nullable<System.DateTime> _endDate;
    
        [DataMember]
        public Nullable<bool> IsCheck
        {
            get { return _isCheck; }
            set
            {
                if (_isCheck != value)
                {
                    _isCheck = value;
                    OnPropertyChanged("IsCheck");
                }
            }
        }
        private Nullable<bool> _isCheck;
    
        [DataMember]
        public string ImgUrl
        {
            get { return _imgUrl; }
            set
            {
                if (_imgUrl != value)
                {
                    _imgUrl = value;
                    OnPropertyChanged("ImgUrl");
                }
            }
        }
        private string _imgUrl;
    
        [DataMember]
        public Nullable<int> DonateNum
        {
            get { return _donateNum; }
            set
            {
                if (_donateNum != value)
                {
                    _donateNum = value;
                    OnPropertyChanged("DonateNum");
                }
            }
        }
        private Nullable<int> _donateNum;
    
        [DataMember]
        public Nullable<bool> IsFinished
        {
            get { return _isFinished; }
            set
            {
                if (_isFinished != value)
                {
                    _isFinished = value;
                    OnPropertyChanged("IsFinished");
                }
            }
        }
        private Nullable<bool> _isFinished;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Administrator Administrator
        {
            get { return _administrator; }
            set
            {
                if (!ReferenceEquals(_administrator, value))
                {
                    var previousValue = _administrator;
                    _administrator = value;
                    FixupAdministrator(previousValue);
                    OnNavigationPropertyChanged("Administrator");
                }
            }
        }
        private Administrator _administrator;
    
        [DataMember]
        public TrackableCollection<DonateRecord> DonateRecords
        {
            get
            {
                if (_donateRecords == null)
                {
                    _donateRecords = new TrackableCollection<DonateRecord>();
                    _donateRecords.CollectionChanged += FixupDonateRecords;
                }
                return _donateRecords;
            }
            set
            {
                if (!ReferenceEquals(_donateRecords, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_donateRecords != null)
                    {
                        _donateRecords.CollectionChanged -= FixupDonateRecords;
                    }
                    _donateRecords = value;
                    if (_donateRecords != null)
                    {
                        _donateRecords.CollectionChanged += FixupDonateRecords;
                    }
                    OnNavigationPropertyChanged("DonateRecords");
                }
            }
        }
        private TrackableCollection<DonateRecord> _donateRecords;
    
        [DataMember]
        public User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                    OnNavigationPropertyChanged("User");
                }
            }
        }
        private User _user;
    
        [DataMember]
        public TrackableCollection<Goody> Goodies
        {
            get
            {
                if (_goodies == null)
                {
                    _goodies = new TrackableCollection<Goody>();
                    _goodies.CollectionChanged += FixupGoodies;
                }
                return _goodies;
            }
            set
            {
                if (!ReferenceEquals(_goodies, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_goodies != null)
                    {
                        _goodies.CollectionChanged -= FixupGoodies;
                    }
                    _goodies = value;
                    if (_goodies != null)
                    {
                        _goodies.CollectionChanged += FixupGoodies;
                    }
                    OnNavigationPropertyChanged("Goodies");
                }
            }
        }
        private TrackableCollection<Goody> _goodies;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Administrator = null;
            DonateRecords.Clear();
            User = null;
            Goodies.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupAdministrator(Administrator previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.DonationProjects.Contains(this))
            {
                previousValue.DonationProjects.Remove(this);
            }
    
            if (Administrator != null)
            {
                if (!Administrator.DonationProjects.Contains(this))
                {
                    Administrator.DonationProjects.Add(this);
                }
    
                AdminId = Administrator.AdminId;
            }
            else if (!skipKeys)
            {
                AdminId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Administrator")
                    && (ChangeTracker.OriginalValues["Administrator"] == Administrator))
                {
                    ChangeTracker.OriginalValues.Remove("Administrator");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Administrator", previousValue);
                }
                if (Administrator != null && !Administrator.ChangeTracker.ChangeTrackingEnabled)
                {
                    Administrator.StartTracking();
                }
            }
        }
    
        private void FixupUser(User previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.DonationProjects.Contains(this))
            {
                previousValue.DonationProjects.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.DonationProjects.Contains(this))
                {
                    User.DonationProjects.Add(this);
                }
    
                UserId = User.UserId;
            }
            else if (!skipKeys)
            {
                UserId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("User")
                    && (ChangeTracker.OriginalValues["User"] == User))
                {
                    ChangeTracker.OriginalValues.Remove("User");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("User", previousValue);
                }
                if (User != null && !User.ChangeTracker.ChangeTrackingEnabled)
                {
                    User.StartTracking();
                }
            }
        }
    
        private void FixupDonateRecords(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DonateRecord item in e.NewItems)
                {
                    item.DonationProject = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DonateRecords", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DonateRecord item in e.OldItems)
                {
                    if (ReferenceEquals(item.DonationProject, this))
                    {
                        item.DonationProject = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DonateRecords", item);
                    }
                }
            }
        }
    
        private void FixupGoodies(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Goody item in e.NewItems)
                {
                    item.DonationProject = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Goodies", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Goody item in e.OldItems)
                {
                    if (ReferenceEquals(item.DonationProject, this))
                    {
                        item.DonationProject = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Goodies", item);
                    }
                }
            }
        }

        #endregion
    }
}
