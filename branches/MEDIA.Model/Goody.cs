//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MEDIA.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(DonationProject))]
    public partial class Goody: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public Nullable<int> ProjectId
        {
            get { return _projectId; }
            set
            {
                if (_projectId != value)
                {
                    ChangeTracker.RecordOriginalValue("ProjectId", _projectId);
                    if (!IsDeserializing)
                    {
                        if (DonationProject != null && DonationProject.ProjectId != value)
                        {
                            DonationProject = null;
                        }
                    }
                    _projectId = value;
                    OnPropertyChanged("ProjectId");
                }
            }
        }
        private Nullable<int> _projectId;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public string Title
        {
            get { return _title; }
            set
            {
                if (_title != value)
                {
                    _title = value;
                    OnPropertyChanged("Title");
                }
            }
        }
        private string _title;
    
        [DataMember]
        public Nullable<decimal> Price
        {
            get { return _price; }
            set
            {
                if (_price != value)
                {
                    _price = value;
                    OnPropertyChanged("Price");
                }
            }
        }
        private Nullable<decimal> _price;
    
        [DataMember]
        public Nullable<int> Num
        {
            get { return _num; }
            set
            {
                if (_num != value)
                {
                    _num = value;
                    OnPropertyChanged("Num");
                }
            }
        }
        private Nullable<int> _num;
    
        [DataMember]
        public string CurrencyStr
        {
            get { return _currencyStr; }
            set
            {
                if (_currencyStr != value)
                {
                    _currencyStr = value;
                    OnPropertyChanged("CurrencyStr");
                }
            }
        }
        private string _currencyStr;
    
        [DataMember]
        public Nullable<int> SaleNum
        {
            get { return _saleNum; }
            set
            {
                if (_saleNum != value)
                {
                    _saleNum = value;
                    OnPropertyChanged("SaleNum");
                }
            }
        }
        private Nullable<int> _saleNum;
    
        [DataMember]
        public Nullable<bool> IsLimit
        {
            get { return _isLimit; }
            set
            {
                if (_isLimit != value)
                {
                    _isLimit = value;
                    OnPropertyChanged("IsLimit");
                }
            }
        }
        private Nullable<bool> _isLimit;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public DonationProject DonationProject
        {
            get { return _donationProject; }
            set
            {
                if (!ReferenceEquals(_donationProject, value))
                {
                    var previousValue = _donationProject;
                    _donationProject = value;
                    FixupDonationProject(previousValue);
                    OnNavigationPropertyChanged("DonationProject");
                }
            }
        }
        private DonationProject _donationProject;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            DonationProject = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupDonationProject(DonationProject previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Goodies.Contains(this))
            {
                previousValue.Goodies.Remove(this);
            }
    
            if (DonationProject != null)
            {
                if (!DonationProject.Goodies.Contains(this))
                {
                    DonationProject.Goodies.Add(this);
                }
    
                ProjectId = DonationProject.ProjectId;
            }
            else if (!skipKeys)
            {
                ProjectId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DonationProject")
                    && (ChangeTracker.OriginalValues["DonationProject"] == DonationProject))
                {
                    ChangeTracker.OriginalValues.Remove("DonationProject");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DonationProject", previousValue);
                }
                if (DonationProject != null && !DonationProject.ChangeTracker.ChangeTrackingEnabled)
                {
                    DonationProject.StartTracking();
                }
            }
        }

        #endregion
    }
}
