//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MEDIA.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(DonationProject))]
    public partial class Administrator: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public short AdminId
        {
            get { return _adminId; }
            set
            {
                if (_adminId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'AdminId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _adminId = value;
                    OnPropertyChanged("AdminId");
                }
            }
        }
        private short _adminId;
    
        [DataMember]
        public string AdminName
        {
            get { return _adminName; }
            set
            {
                if (_adminName != value)
                {
                    _adminName = value;
                    OnPropertyChanged("AdminName");
                }
            }
        }
        private string _adminName;
    
        [DataMember]
        public string AdminPwd
        {
            get { return _adminPwd; }
            set
            {
                if (_adminPwd != value)
                {
                    _adminPwd = value;
                    OnPropertyChanged("AdminPwd");
                }
            }
        }
        private string _adminPwd;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<DonationProject> DonationProjects
        {
            get
            {
                if (_donationProjects == null)
                {
                    _donationProjects = new TrackableCollection<DonationProject>();
                    _donationProjects.CollectionChanged += FixupDonationProjects;
                }
                return _donationProjects;
            }
            set
            {
                if (!ReferenceEquals(_donationProjects, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_donationProjects != null)
                    {
                        _donationProjects.CollectionChanged -= FixupDonationProjects;
                    }
                    _donationProjects = value;
                    if (_donationProjects != null)
                    {
                        _donationProjects.CollectionChanged += FixupDonationProjects;
                    }
                    OnNavigationPropertyChanged("DonationProjects");
                }
            }
        }
        private TrackableCollection<DonationProject> _donationProjects;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            DonationProjects.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupDonationProjects(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DonationProject item in e.NewItems)
                {
                    item.Administrator = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DonationProjects", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DonationProject item in e.OldItems)
                {
                    if (ReferenceEquals(item.Administrator, this))
                    {
                        item.Administrator = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DonationProjects", item);
                    }
                }
            }
        }

        #endregion
    }
}
